local Layering = require "game.module.layering"
local STATE ={
	returning=hash("returning"),
	coming=hash("coming"),
	patrol=hash("patrol"),
	waiting=hash("waiting"),
	initial=hash("initial")
}
local ANIMATION ={
	idle=hash("idle"),
	walk=hash("walk"),
}
local HP_COLOR={
	RED=vmath.vector4(1,0,0,1),
	ORANGE=vmath.vector4(1,0.7,0,1),
	GREEN=vmath.vector4(0,1,0,1)
}
local DIALOG={
	"어디 한번 재밌게 놀아볼까",
	"아 게임잼 끝나니까 \n너무 피곤하네 ",
	"오늘도 신나게 놀아볼까요",
	"이제 게임잼도 끝났는데 \n뭐하고 놀지",
	"포포가 여기 있다던데",
	"페퍼야 놀자~",
	"술이나 먹자",
	"오 취향저격~",
	"꺼억~ 배부르다",
	"헬스는 언제하지",
	"역시 스토브파티보다 \n재밌네",
	"뭐지? 누가 자꾸 집에 \n못가게 하지",
	"모쏠 만세!",
	"크리스마스에는 \n혼자보내야지",
	"오늘은 새벽까지 달린다",
	"역시 집에 가긴 아쉬워",
	"계속 놀아보자고",
	"아 택시 불렀는데",
	"지갑 놓고 왔네",
	"핸드폰 놓고 왔네",
	"뚜씨 뚜씨 뚜씨~"
}

local MIN_WAITING=1
local MAX_WAITING=6
local RAY_DISTANCE=30
local MANAGER=msg.url("default:/manager")

go.property("seed", 1)
go.property("speed", 50)
go.property("hp_decrease_delay", 0.1)
go.property("maxhp", 10)
go.property("initial_direction", vmath.vector3(1,0,0))
go.property("initial_pos", vmath.vector3())
go.property("direction", vmath.vector3(0,0,0))
go.property("tag1", hash(""))
go.property("tag2", hash(""))
go.property("tag3", hash(""))
go.property("fliped_sprite", false)
go.property("custom_scale", vmath.vector3(1,1,1))

function speak(list)
	local speech=factory.create("#speech",go.get_position()+vmath.vector3(0,30,0),nil)
	msg.post(speech, "text",{text=list[math.random(#list)],sender=go.get_id()})
end

local function draw_line(from, to)
	msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = vmath.vector4(1,0,0,1) })
end

local function check_forward(self)
	--print(self.direction)
	local from =go.get_position()
	local to =go.get_position()+self.direction*RAY_DISTANCE
	local result = physics.raycast(from, to, {hash("obstacle")})
	if result then
		draw_line(from, result.position) -- <5>
	else
		draw_line(from, to) -- <6>
	end
	return result
end

function update_hp(self)
	go.set("#hp", "scale.x", self.hp/self.maxhp)
	if self.hp/self.maxhp <= 0.1 then
		go.set("#hp","tint",HP_COLOR.RED)
	elseif self.hp/self.maxhp <= 0.5 then
		go.set("#hp","tint",HP_COLOR.ORANGE)
	else
		go.set("#hp","tint",HP_COLOR.GREEN)
	end 
end

function coming(self)
	self.vel = self.speed*self.initial_direction
end

function returning(self)
	self.vel = self.speed*-self.initial_direction
end

function patrol(self)
	local result = check_forward(self)
	if result  then
		self.direction.y=-self.direction.y
		self.direction.x=-self.direction.x
	end
	self.vel = self.speed*self.direction
end

function check_state(self)
	if self.hp/self.maxhp>=1 then
		self.state = STATE.returning
		if not self.returning then
			msg.post(MANAGER, "return",{id=go.get_id()})
			speak(DIALOG)
			self.current_animation=ANIMATION.idle
			self.returning=true
		end
		self.hp=self.maxhp
	elseif self.hp/self.maxhp<=0 then
		self.state = STATE.coming
		if not self.come then
			self.current_animation=ANIMATION.idle
			msg.post(MANAGER, "come",{id=go.get_id()})
			self.come=true
		end
		self.hp=0
	end
end

function flip_animation(self)
	
	if self.fliped_sprite then
		msg.post(self.sprite, "disable")
		if self.vel.x>0 then
			self.sprite="#sprite"
		elseif self.vel.x<0 then
			self.sprite="#flip_sprite"
		end
		msg.post(self.sprite, "enable")
	end
	
	if self.vel.x>0 then
		sprite.set_hflip(self.sprite,false)
	elseif self.vel.x<0 then
		sprite.set_hflip(self.sprite,true)
	end
	
	if self.current_animation == ANIMATION.idle and vmath.length(self.vel) > 10 then
		self.current_animation=ANIMATION.walk
		msg.post(self.sprite, "play_animation",{id=self.current_animation})
		particlefx.play("#smoke")
	
	elseif self.current_animation == ANIMATION.walk and vmath.length(self.vel) <= 10  then
		self.current_animation=ANIMATION.idle
		msg.post(self.sprite, "play_animation",{id=self.current_animation})
		particlefx.stop("#smoke")
	end
end

function init(self)
	math.randomseed(os.time()*self.seed)
	self.state=STATE.initial
	self.tag={self.tag1,self.tag2,self.tag3}
	self.current_animation=ANIMATION.idle
	self.sprite="#sprite"
	self.come=false
	self.returning=false
	self.hp=self.maxhp/2
	if self.fliped_sprite then
		msg.post("#flip_sprite", "disable")
	end
	go.set_scale(self.custom_scale)
	update_hp(self)
	go.set(self.sprite, "tint", vmath.vector4(0,0,0,0))
	go.animate(self.sprite, "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1,1,1,1), go.EASING_LINEAR, 1)
	timer.delay(1, false, function()
		speak(DIALOG)
	end)
	self.direction=vmath.normalize(self.initial_pos-go.get_position())
	self.vel=self.direction*self.speed
	go.set("#shadow", "tint", vmath.vector4(0,0,0,0.4))
end

function state_timer(self)
	self.state_timer = timer.delay(math.random(MIN_WAITING,MAX_WAITING),true, function()
		if self.state==STATE.waiting then
			self.state=STATE.patrol
			local direction =vmath.vector3(math.floor(math.random(-100,100)),math.floor(math.random(-100,100)),0)
			--print(direction)
			self.direction=vmath.normalize(direction)
		elseif self.state==STATE.patrol then
			self.state=STATE.waiting
			self.direction=vmath.vector3()
		end
		msg.post(".","recall_state_timer")
	end)
end

function on_message(self, message_id, message, sender)
	if message_id==hash("recall_state_timer") then
		timer.cancel(self.state_timer)
		state_timer(self)
	end
	if message_id==hash("dead_response") then
		
		go.animate(self.sprite, "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(0,0,0,0), go.EASING_LINEAR, 1)
		timer.delay(1, false, function()
			go.delete()
		end)
	end
	if message_id==hash("trigger_response") then
		if message.other_group == hash("deadline") and message.enter then
			if not self.returning then
				msg.post(MANAGER, "dead",{id=go.get_id()})
				msg.post("#collisionobject", "disable")
			else
				msg.post(".", "dead_response")
			end
		end
	end
	if message_id==hash("match") then
		for i=1,#self.tag do
			if not message.tag then
				self.hp=self.hp+message.damage
				if self.hp>=self.maxhp then
					self.hp=self.maxhp
				end
				update_hp(self)
				break
			elseif self.tag[i]==message.tag then
				factory.create("#effect",go.get_position(),nil,{tag=message.tag})
				self.hp=self.hp+message.damage
				if self.hp>=self.maxhp then
					self.hp=self.maxhp
				end
				go.animate(".", "scale", go.PLAYBACK_ONCE_PINGPONG, go.get_scale()+vmath.vector3(0.5,0.5,0), go.EASING_INOUTBOUNCE, 0.2)
				update_hp(self)
				break
			end
		end
	end
end

function update(self,dt)
	Layering.update(self, dt)
	if self.state == STATE.coming then
		coming(self)
	elseif self.state == STATE.returning then
		returning(self)
	elseif self.state == STATE.initial and vmath.length(go.get_position()-self.initial_pos)<10 then
		self.state=STATE.waiting
		self.direction = vmath.vector3()
		state_timer(self)
		timer.delay(self.hp_decrease_delay, true, function()
			check_state(self)
			if self.state == STATE.patrol or self.state == STATE.waiting then
				self.hp=self.hp-0.3
				update_hp(self)
			end
			--print(self.hp)
		end)
	else
		patrol(self)
	end
	
	local pos = go.get_position()+self.vel*dt
	go.set_position(pos)
	flip_animation(self)
end

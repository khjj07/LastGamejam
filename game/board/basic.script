local emthree = require "emthree.emthree"
local effects = require "emthree.effects"
local rendercam = require "rendercam.rendercam"
local blocksize = 50		-- Distance between block centers
local boardwidth = 6		-- Number of columns
local boardheight = 10		-- Number of rows
local MANAGER=msg.url("default:/manager")
local TAG ={
	hash("shield"),
	hash("staff"),
	hash("sword"),
	hash("monster"),
	hash("skeleton"),
	hash("human"),
}
local colors = {
	hash("Icon_Shield"),
	hash("Icon_Staff"),
	hash("Icon_Sword"),
	hash("Icon_Monster"),
	hash("Icon_Skeleton"),
	hash("Icon_Human")
}

--[[local color_lookup = {
	[hash("brickBlue06")] = "blue",
	[hash("brickGreen05")] = "green",
	[hash("brickRed04")] = "red",
	[hash("brickWhite05")] = "white",
	[hash("brickYellow03")] = "yellow",
}--]]


function shake_block(id,scale,duration)
	go.animate(id, "rotation", go.PLAYBACK_LOOP_PINGPONG, vmath.quat_rotation_z(math.pi/180*scale), go.EASING_LINEAR, duration)
end

function stop_shake(id)
	if id then
		go.cancel_animations(id, "rotation")
		go.animate(id, "rotation", go.PLAYBACK_ONCE_FORWARD, vmath.quat_rotation_z(math.pi/180*0), go.EASING_LINEAR, 0.1)
	end
end

local function match(board, block, horisontal_neighbors, vertical_neighbors)
	if #horisontal_neighbors >= 2 then
		emthree.remove_block(board, block)
		emthree.remove_blocks(board, horisontal_neighbors)
	end
	if #vertical_neighbors >= 2 then
		emthree.remove_block(board, block)
		emthree.remove_blocks(board, vertical_neighbors)
	end
	if #vertical_neighbors+ #horisontal_neighbors == 2 then
		msg.post(MANAGER,"match",{tag=block.type,damage=10})
	elseif #vertical_neighbors+ #horisontal_neighbors == 3 then
		msg.post(MANAGER,"match",{tag=block.type,damage=15})
	elseif #vertical_neighbors+ #horisontal_neighbors >= 4 then
		msg.post(MANAGER,"match",{tag=block.type,damage=40})
	end
end

local function create_block(position, type, color)
	if not type and not color then
		local num = math.random(#colors)
		color = color or colors[num]
		type = type or TAG[num]
	end
	local id = factory.create("#factory", position, null, { color = color, type = type })
	msg.post(id, "set_parent", { parent_id = go.get_id(), keep_world_transform = 0 })
	return id, color, type
end

local function create_spawner(position, type)
	position.z = 1
	local id = factory.create("#factory", position, null, { type = type, color = hash("brickGrey") })
	msg.post(id, "set_parent", { parent_id = go.get_id(), keep_world_transform = 0 })
	return id, type
end

local function create_blocker(position, type)
	position.z = 1
	local id = factory.create("#factory", position, null, { type = type, color = hash("brickSpecial06") })
	msg.post(id, "set_parent", { parent_id = go.get_id(), keep_world_transform = 0 })
	return id, type
end

function init(self)
	--local ease = { 0, 1, 0.8, 0.75, 0.8, 0.9, 1,1, 0.9,1, 1,1,1, 1,1 }
	--local my_easing = vmath.vector(ease)
	self.board = emthree.create_board(boardwidth, boardheight, blocksize, { direction = emthree.COLLAPSE_DOWN,slide_duration =2,swap_duration=0.2, collapse_duration=0.45, collapse_easing=go.EASING_LINEAR})
	emthree.on_create_block(self.board, create_block)
	--emthree.on_create_spawner(self.board, create_spawner)
	emthree.on_create_blocker(self.board, create_blocker)
	emthree.on_match(self.board, match)
	self.current_block =nil
	for x=0,boardwidth-1 do
		emthree.create_spawner(self.board, x, boardheight - 1, hash("SPAWNER"))
	end
	emthree.fill_board(self.board)

	--[[self.debug = {}
	for x=0,boardwidth-1 do
		self.debug[x] = {}
		for y=0,boardheight-1 do
			local pos = go.get_position() + vmath.vector3((blocksize / 2) + (blocksize * x), (blocksize / 2) + (blocksize * y), 1)
			self.debug[x][y] = msg.url(nil, factory.create("#debugfactory", pos), "label")
		end
	end--]]

	emthree.stabilize(self.board, function()
		msg.post(".", "acquire_input_focus")
	end)
end


--[[function update(self, dt)
	for x=0,boardwidth-1 do
		for y=0,boardheight-1 do
			local block = self.board.slots[x][y]
			if not block then
				label.set_text(self.debug[x][y], "EMPTY")
			elseif block.blocker then
				label.set_text(self.debug[x][y], "BLOCKER")
			elseif block.spawner then
				label.set_text(self.debug[x][y], "SPAWNER")
			else
				label.set_text(self.debug[x][y], color_lookup[block.color] or "?")
			end
		end
	end
end--]]

function on_input(self, action_id, action)
	local mouse_position = rendercam.screen_to_world_2d(action.screen_x, action.screen_y)
	if action_id == hash("touch") then
		local x,y = emthree.screen_to_slot(self.board, mouse_position.x, mouse_position.y)
		if action.pressed then
			self.current_block = emthree.get_block(self.board, x, y).id
			shake_block(self.current_block ,10,0.1)
		end
		if action.released then
			stop_shake(self.current_block )
		end
		if (action.pressed or action.released) then
			action.x=mouse_position.x
			action.y=mouse_position.y
			return emthree.on_input(self.board, action)
		end
	end
	
end
